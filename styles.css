/* Certain types of motion-based animations can cause discomfort for
some users. In particular, people with vestibular disorders have
sensitivity to certain motion triggers.
The '@media' at-rule has a media feature called 'prefers-reduced-
motion' to set CSS based on the user's  preferences. It can take one of
the following values:
- reduce
- no-preference
Example:
@media (feature: value) {
    selector {
        styles
    }
} */
@media (prefers-reduced-motion: no-preference) {
    * {
        scroll-behavior: smooth;
    }
}

body {
    background: #f5f6f7;
    color: #1b1b32;
    font-family: Helvetica;
    margin: 0;
}

header {
    /* To make the 'header' take up the full width of its parent container. */
    width: 100%;
    height: 50px;
    background-color: #1b1b32;
    /* To set the 'display' to use Flexbox */
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: fixed;
    top: 0;
}

/* Below is using an 'id' as a selector. */
#logo {
    /* A useful property of an SVG (scalable vector graphics) is that it
    contains a 'path' attribute which allows the image to be scaled
    without affecting the resolution of the resultant image.
    Pre-condition: The 'img' is assuming it's default size, which is too large.
    CSS has a 'max' function which returns the largest of a set of
    comma-separated values.
    Below, the img will have a min width of 100px,
    and as the viewport grows, the image will grow accordingly to be 18% of 
    the viewport width. */
    width: max(100px, 18vw);
    background-color: #0a0a23;
    aspect-ratio: 35 / 4;
    padding: 0.4rem;
}

h1 {
    /* To set font-color */
    color: #f1be32;
    font-size: min(5vw, 1.2em);
    text-align: center;
}

main {
    padding-top: 25px;
}

section {
    width: 80%;
    margin: 0 auto 10px auto;
    max-width: 600px;
}

nav {
    width: 50%;
    max-width: 300px;
    height: 50px;
}

/* Use the '>' selector to target the unordered list elements within
the 'nav' elements.
Only do this with selectors, not class selectors.
To do class selectors, separate the class selectors with a space. */
nav > ul {
    display: flex;
    justify-content: space-evenly;
    flex-wrap: wrap;
    align-items: center;
    padding-inline-start: 0;
    margin-block: 0;
    height: 100%;

}

nav > ul > li{
    color: #dfdfe2;
    margin: 0 0.2rem;
    padding: 0.2rem;
    display: block;
}

nav > ul > li:hover {
    background-color: #dfdfe2;
    color: #1b1b32;
    cursor: pointer;
}

li > a {
    /* Contrast between elements is a key factor.
    For example, the contrast between the text and the background
    of a heading should be at least 4.5:1.
    Change the font color of all the anchor elements within the list
    elements to something with a contrast ratio of at least 7:1; */
    color: inherit;
    /* To remove the underline of the links */
    text-decoration: none;
}

/* Typeface plays an important role in the accessibility of a page.
Some fonts are easier to read than others, and this is especially true on
low-resolution screens. */
h1, h2 {
    font-family: Verdana, Tahoma;
}

h2 {
    border-bottom: 4px solid #dfdfe2;
    margin-top: 0;
    padding-top: 60px;
}

.info {
    padding: 10px 0 0 5px;
}

.formrow {
    margin-top: 30px;
    padding: 0px 15px;
}

input {
    font-size: 16px;
}

.info label, .info input {
    display: inline-block;
}

.info input {
    width: 50%;
    text-align: left;
}

.info label {
    width: 10%;
    min-width: 55px;
    text-align: right;
}

.question-block {
    text-align: left;
    display: block;
    width: 100%;
    margin-top: 20px;
    padding-top: 5px;
}

p {
    margin-top: 5px;
    padding-left: 15px;
    font-size: 20px;
}

/* To prevent unnecessary repetition, target the 'before' pseudo-element
of the 'p' element, and give it a 'content' property of '"Question #"'. */
p::before {
    content: "Question #";
}

.question {
    border: none;
    padding-bottom: 0;
}

/* While 'ul'/'li' elements are great at providing bullets for list items,
your radio buttons don't need them. You can control what the bullets
look with the 'list-style' property. For example, you can turn your
bullets into circles using 'list-style: circle;'. */
.answers-list {
    list-style: none;
    padding: 0;
}

button {
    display: block;
    margin: 40px auto;
    width: 40%;
    padding: 15px;
    font-size: 23px;
    background: #d0d0d5;
    border: 3px solid #3b3b4f;
}

footer {
    background: #2a2a40;
    display: flex;
    justify-content: center;
}

footer, 
footer a {
    color: #dfdfe2;
}

address {
    text-align: center;
    padding: 0.3em;
}

.sr-only {
    /* '(Date of Birth)' text does not act like a block.
    (Possibly overlap the object placed after the text) */
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
}
